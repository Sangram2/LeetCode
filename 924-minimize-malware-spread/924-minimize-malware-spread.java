// class Solution {
//     int[] parent;
//     int[] size;
//     public int minMalwareSpread(int[][] graph, int[] initial) {
//         int n = graph.length;
//         parent = new int[n];
//         size = new int[n];
        
//         for(int i=0;i<n;i++){
//             parent[i] = i;
//             size[i] = 1;
//         }
        
//         for(int i=0;i<n;i++){
//             for(int j=0;j<n;j++){
//                 if(i!=j && graph[i][j]==1){
//                     unionHelper(i,j);
//                 }
//             }
//         }
//         int[] freqInfec = new int[n];
//         int min = n;
//         for(int i : initial){
//             int p = find(i);
//             freqInfec[p]++;
//             min = Math.min(i,min);
//         }
        
        
//         int ans_i = -1;
//         int size_i = 0;
//         for(int i : initial){
//             int p = find(i);
//             if(freqInfec[p] == 1){
//                 if(size_i==0){
//                     ans_i = i;
//                     size_i = size[p];
//                 }
//                 else if(size[p] == size_i){
//                     ans_i = Math.min(ans_i,i);
//                 }
//                 else if(size[p] > size_i){
//                     size_i = size[p];
//                     ans_i = i; 
//                 } 
//             }
//         }
//         if(ans_i==-1){
//             return min;
//         }
//         else{
//             return ans_i;
//         }
        
//     }
    
//     int find(int x){
//         if(parent[x]==x){
//             return x;
//         }
//         else {
//             parent[x] = find(parent[x]);
//             return parent[x];
//         }
//     }
    
//     void unionHelper(int x,int y){
//         int lx = find(x);
//         int ly = find(y);
        
//         if(lx != ly){
//             union(lx,ly);
//         }
//     }
    
//     void union(int sl1,int sl2){
//         if(size[sl1]<size[sl2]){
//             parent[sl1] = sl2;
//             size[sl2] += size[sl1];
//         }
//         else{
//             parent[sl2] = sl1;
//             size[sl1] += size[sl2];
//         }
        
//     }
// }

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        for(int i = 0; i < graph.length; i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i = 0; i < graph.length; i++){
            for(int j = 0; j < graph.length; j++){
                if(i != j && graph[i][j] == 1){
                    unionHelper(i, j);
                }
            }
        }
        
        int[] countMWMap = new int[graph.length];
        for(int i: initial){
            int ri = find(i);
            countMWMap[ri]++;
        }
        
        Arrays.sort(initial);
        
        int mi = initial[0];
        int ms = 0;
        for(int i: initial){
            int ri = find(i);
            if(countMWMap[ri] == 1){
                if(size[ri] > ms) {
                    mi = i;
                    ms = size[ri];
                }
            }
        }
        
        return mi;
    }

    int[] parent;
    int[] size;
    
    int find(int x){
        if(parent[x] != x){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void unionHelper(int x, int y){
        int X = find(x);
        int Y = find(y);
        
        if(X != Y){
            if(size[X] < size[Y]){
                parent[X] = Y;
                size[Y] += size[X];
            } else if(size[Y] <= size[X]){
                parent[Y] = X;
                size[X] += size[Y];
            }
        }
    }
}